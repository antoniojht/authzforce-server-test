<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:http="http://cxf.apache.org/transports/http/configuration"
   xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
   xsi:schemaLocation="
      http://cxf.apache.org/configuration/security
      http://cxf.apache.org/schemas/configuration/security.xsd
      http://cxf.apache.org/transports/http/configuration
      http://cxf.apache.org/schemas/configuration/http-conf.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/util 
      http://www.springframework.org/schema/util/spring-util.xsd">

   <bean id="pdpModelHandler" class="org.ow2.authzforce.core.pdp.impl.PdpModelHandler">
      <constructor-arg name="catalogLocation" value="src/test/resources/authzforce-ce-server/conf/catalog.xml" />
      <constructor-arg name="extensionXsdLocation" value="src/test/resources/authzforce-ce-server/conf/authzforce-ext.xsd" />
   </bean>

   <util:list id="clientApiSchemaLocations">
      <value>classpath:/xml.xsd</value>
      <value>classpath:/atom.xsd</value>
      <value>classpath:/xacml-core-v3-schema-wd-17.xsd</value>
      <value>classpath:/pdp-ext-base.xsd</value>
      <value>classpath:/org.ow2.authzforce.core.pdp.testutil.ext.xsd</value>
      <value>classpath:/xsd/authz-rest-api.xsd</value>
   </util:list>

   <bean id="clientApiSchemaHandler" class="org.apache.cxf.jaxrs.utils.schemas.SchemaHandler">
      <!-- FIXME: using catalog causes error: authz-ext:AbstractAttributeFinder type undefined -->
      <!-- <property name="catalogLocation" value="classpath:/catalog.xml" /> -->
      <property name="schemaLocations" ref="clientApiSchemaLocations" />
   </bean>

   <util:list id="extraJaxbClasses" value-type="java.lang.Class">
      <value>org.ow2.authzforce.core.pdp.testutil.ext.xmlns.TestAttributeProvider</value>
   </util:list>

   <bean id="clientJaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
      <property name="singleJaxbContext" value="true" />
      <property name="extraClass" value="#{extraJaxbClasses.toArray()}" />
      <property name="schemaHandler" ref="clientApiSchemaHandler" />
   </bean>

   <util:list id="fastinfosetType">
      <value>application/fastinfoset</value>
   </util:list>

   <bean id="clientJaxbProviderFI" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
      <property name="singleJaxbContext" value="true" />
      <property name="extraClass" value="#{extraJaxbClasses.toArray()}" />
      <property name="schemaHandler" ref="clientApiSchemaHandler" />
      <property name="produceMediaTypes" ref="fastinfosetType" />
      <property name="consumeMediaTypes" ref="fastinfosetType" />
   </bean>

   <util:list id="jsonTypes">
      <value>application/json</value>
   </util:list>

   <util:map id="xmlnsToJsonKeyPrefixMap" map-class="java.util.Hashtable">
      <entry key="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" value="" />
      <entry key="http://www.w3.org/2005/Atom" value="atom" />
      <entry key="http://authzforce.github.io/rest-api-model/xmlns/authz/5" value="az" />
      <entry key="http://authzforce.github.io/core/xmlns/test/3" value="test" />
   </util:map>

   <bean id="clientJsonJaxbProvider" class="org.ow2.authzforce.webapp.org.apache.cxf.jaxrs.provider.json.JSONProvider">
      <property name="produceMediaTypes" ref="jsonTypes" />
      <property name="consumeMediaTypes" ref="jsonTypes" />
      <property name="convention" value="mapped" />
      <property name="convertTypesToStrings" value="true" />
      <property name="readXsiType" value="true" />
      <property name="namespaceSeparator" value=":" />
      <!-- It is tempting to use out/inTransformElements property instead of namespaceMap to allow further customization. However, it makes configuration redundant, more complex and has unexpected results 
         in tests. -->
      <property name="namespaceMap" ref="xmlnsToJsonKeyPrefixMap" />
      <!-- <property name="outTransformElements"> -->
      <!-- <util:map> -->
      <!-- <entry key="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}*" value="*" /> -->
      <!-- <entry key="{http://www.w3.org/2005/Atom}*" value="{atom}*" /> -->
      <!-- <entry key="{http://authzforce.github.io/rest-api-model/xmlns/authz/5}*" value="{az}*" /> -->
      <!-- <entry key="{http://authzforce.github.io/core/xmlns/test/3}*" value="{test}*" /> -->
      <!-- </util:map> -->
      <!-- </property> -->
      <!-- <property name="inTransformElements"> -->
      <!-- <util:map> -->
      <!-- <entry key="*" value="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}*" /> -->
      <!-- <entry key="{atom}*" value="{http://www.w3.org/2005/Atom}*" /> -->
      <!-- <entry key="{az}*" value="{http://authzforce.github.io/rest-api-model/xmlns/authz/5}*" /> -->
      <!-- <entry key="{test}*" value="{http://authzforce.github.io/core/xmlns/test/3}*" /> -->
      <!-- </util:map> -->
      <!-- </property> -->
      <!-- serializeAsArray has effect iff arrayKeys non-empty, in which case it force serialization of every collection to a JSON array even if single-valued. It does not apply to deserializing from array -->
      <property name="serializeAsArray" value="true" />
      <property name="arrayKeys">
         <util:list>
            <!-- <value>atom:link</value> -->
         </util:list>
      </property>
      <!-- Note: we may try to use elementsToAttributes here and attributesToElements property on the other end. But it is supposed not to work for JSON (what about our custom JSONProvider): https://issues.apache.org/jira/browse/CXF-3475 -->
      <property name="schemaHandler" ref="clientApiSchemaHandler" />
      <property name="singleJaxbContext" value="true" />
      <property name="extraClass" value="#{extraJaxbClasses.toArray()}" />
   </bean>

   <!-- More info: http://cxf.apache.org/docs/client-http-transport-including-ssl-support.html -->
   <http:conduit name="*.http-conduit">
      <http:tlsClientParameters>
         <!-- <sec:keyManagers keyPassword="changeit"> <sec:keyStore type="JKS" password="password" file="D:\users\XXX\john.doe-taz-client-keystore.jks"/> </sec:keyManagers> -->
         <sec:trustManagers>
            <sec:keyStore type="JKS" password="password" resource="taz-client-truststore.jks" />
         </sec:trustManagers>
         <sec:cipherSuitesFilter>
            <sec:include>.*_WITH_RC4_.*</sec:include>
            <sec:include>.*_WITH_AES_.*</sec:include>
            <sec:exclude>.*_MD5</sec:exclude>
            <sec:exclude>.*_anon_.*</sec:exclude>
         </sec:cipherSuitesFilter>
      </http:tlsClientParameters>
      <http:client ConnectionTimeout="0" ReceiveTimeout="0" />
      <!-- HTTP Proxy configuration if needed -->
      <!-- <http:client AutoRedirect="true" Connection="Keep-Alive" BrowserType="Mozilla/5.0 (Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0" ProxyServer="myproxy.acme.com" ProxyServerPort="3128" 
         ProxyServerType="HTTP"/> -->
   </http:conduit>
</beans>